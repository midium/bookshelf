{"version":3,"sources":["token.js","vue-header.js","stats.js"],"names":[],"mappingstfile":"stats.js","sourcesContent":["\"use strict\";\r\n\r\nVue.http.headers.common['X-CSRF-TOKEN'] = document.querySelector('#token').getAttribute('value');\r\n","var MyHeader = Vue.extend({\r\n  template: '#header-control-template',\r\n  props: {\r\n    headerTitle: {\r\n      type: String,\r\n      default: 'Title'\r\n    },\r\n    searchPlaceholder: {\r\n      type: String,\r\n      default: 'Search all'\r\n    },\r\n    search: { // Allow searching\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    filterSearch: { // Let the control know this will be used as filter for the v-for calls\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    exportExcel: { // Allow data export icon\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    exportButtonTooltip: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    backButton: { // Allow back button\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    clearButton: { // Allow search clear button\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    addButton: { // Allow add button\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    addButtonTooltip: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    showImage: { // Allow image on header\r\n      type: Boolean,\r\n      coerce: this.coerceBoolean,\r\n      default: false\r\n    },\r\n    imageUrl: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    searchFor: {\r\n      type: String,\r\n      twoWay: true,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      searchPerformed: false,\r\n      showBadge: false,\r\n      badgeText: '',\r\n      isMobileView: false,\r\n    }\r\n  },\r\n  ready() {\r\n    this.isMobileView = ($(window).width() < 768);\r\n  },\r\n  methods: {\r\n    coerceBoolean: function(val){\r\n      return (typeof val !== \"string\" ? val :\r\n        val === \"true\" ? true :\r\n        val === \"false\" ? false :\r\n        val === \"null\" ? false :\r\n        val === \"undefined\" ? false : val);\r\n    },\r\n    setFilter: function(){\r\n      if(!this.filterSearch){\r\n        this.searchPerformed = true;\r\n      }\r\n      this.dispatchEvent('set-filter', this.searchFor);\r\n    },\r\n    clearFilter: function(){\r\n      this.searchFor = '';\r\n      if(!this.filterSearch){\r\n        this.searchPerformed = false;\r\n      }\r\n      this.dispatchEvent('clear-filter');\r\n    },\r\n    addItem: function(){\r\n      this.dispatchEvent('add-item');\r\n    },\r\n    exportItem: function(){\r\n      this.dispatchEvent('export-item');\r\n    },\r\n    dispatchEvent: function(event, data){\r\n      this.$dispatch(event, data);\r\n    },\r\n  },\r\n  computed: {\r\n  },\r\n  events: {\r\n    'show-badge': function(val) {\r\n      this.showBadge = true;\r\n      this.badgeText = val;\r\n    },\r\n    'search-cleared': function(){\r\n      this.searchFor = '';\r\n    }\r\n  }\r\n});\r\n","\r\n// Components declaration\r\nVue.component('my-header', MyHeader);\r\n\r\nvar vm = new Vue({\r\n    el: '#stats',\r\n\r\n    // data setup\r\n    data: {\r\n      books: {\r\n        onShelf: '',\r\n        mostPages: [],\r\n        fewerPages: [],\r\n        averagePages: '',\r\n        chart: [],\r\n      },\r\n      authors: {\r\n        onShelf: '',\r\n        mostBooks: [],\r\n        longestBook: [],\r\n        shortestBook: [],\r\n        countryAuthors: [],\r\n        booksChart: [],\r\n        countryChart: [],\r\n      },\r\n      publishers: {\r\n        onShelf: '',\r\n        mostBooks: [],\r\n        longestBook: [],\r\n        shortestBook: [],\r\n        chart: [],\r\n      },\r\n      genres: {\r\n        onShelf: '',\r\n        mostBooks: [],\r\n        longestBook: [],\r\n        shortestBook: [],\r\n        chart: [],\r\n      },\r\n      reads: {\r\n        howMany: '',\r\n        longestBook: [],\r\n        shortestBook: [],\r\n        mostRead: [],\r\n        reads:[],\r\n        chart: [],\r\n      },\r\n      votes: {\r\n        bestRanked: [],\r\n        worstRanked: [],\r\n        chart: [],\r\n      },\r\n    },\r\n\r\n    // what to do once the page load at first\r\n    ready: function(){\r\n      this.fetchBooksStats();\r\n      this.fetchAuthorsStats();\r\n      this.fetchPublishersStats();\r\n      this.fetchGenresStats();\r\n      this.fetchReadsStats();\r\n      this.fetchVotesStats();\r\n    },\r\n\r\n    // data changing watchers\r\n    watch: {\r\n    },\r\n\r\n    // computations used to show/hide enable/disable controls\r\n    computed: {\r\n    },\r\n\r\n    // methods\r\n    methods: {\r\n      fetchBooksStats: function(){\r\n        this.showLoader();\r\n\r\n        this.$http.get('/api/book_stats', function(response){\r\n          if(response.success){\r\n            this.books.onShelf = response.value.onShelf;\r\n            this.books.mostPages = response.value.mostPages;\r\n            this.books.fewerPages = response.value.fewerPages;\r\n            this.books.averagePages = response.value.averagePages;\r\n            this.books.chart = response.value.chart;\r\n            if (this.books.chart.labels != ''){\r\n              this.renderChart('booksChart', 'Books per Pages', this.books.chart.labels, this.books.chart.values, this.books.chart.colors);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      renderChart: function(id, title, labels, values, colors){\r\n        var that = this;\r\n        var ctx = document.getElementById(id);\r\n        var myChart = new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: labels,\r\n                datasets: [{\r\n                    label: title,\r\n                    data: values,\r\n                    fillColor: colors,\r\n                    strokeColor: colors,\r\n                    highlightFill: colors,\r\n                    highlightStroke: colors,\r\n                    backgroundColor: colors,\r\n                    borderColor: colors,\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero:true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n      },\r\n      randomColorGenerator: function () {\r\n          return '#' + (Math.random().toString(16) + '0000000').slice(2, 8);\r\n      },\r\n      fetchAuthorsStats: function(){\r\n        this.$http.get('/api/author_stats', function(response){\r\n          if(response.success){\r\n            this.authors.onShelf = response.value.onShelf;\r\n            this.authors.mostBooks = response.value.mostBooks;\r\n            this.authors.longestBook = response.value.longestBook;\r\n            this.authors.shortestBook = response.value.shortestBook;\r\n            this.authors.countryAuthors = response.value.countryAuthors;\r\n            this.authors.booksChart = response.value.booksChart;\r\n            if (this.authors.booksChart.labels != ''){\r\n              this.renderChart('booksAuthorsChart', 'Books per Author', this.authors.booksChart.labels, this.authors.booksChart.values, this.authors.booksChart.colors);\r\n            }\r\n            this.authors.countryAuthors = response.value.countryAuthors;\r\n            this.authors.countryChart = response.value.countryChart;\r\n            if (this.authors.countryChart.labels != ''){\r\n              this.renderChart('authorsCountryChart', 'Authors per Country', this.authors.countryChart.labels, this.authors.countryChart.values, this.authors.countryChart.colors);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      fetchPublishersStats: function(){\r\n        this.$http.get('/api/publisher_stats', function(response){\r\n          if(response.success){\r\n            this.publishers.onShelf = response.value.onShelf;\r\n            this.publishers.mostBooks = response.value.mostBooks;\r\n            this.publishers.longestBook = response.value.longestBook;\r\n            this.publishers.shortestBook = response.value.shortestBook;\r\n            this.publishers.chart = response.value.chart;\r\n            if (this.publishers.chart.labels != ''){\r\n              this.renderChart('booksPublishersChart', 'Books per Publisher', this.publishers.chart.labels, this.publishers.chart.values, this.publishers.chart.colors);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      fetchGenresStats: function(){\r\n        this.$http.get('/api/genre_stats', function(response){\r\n          if(response.success){\r\n            this.genres.onShelf = response.value.onShelf;\r\n            this.genres.mostBooks = response.value.mostBooks;\r\n            this.genres.longestBook = response.value.longestBook;\r\n            this.genres.shortestBook = response.value.shortestBook;\r\n            this.genres.chart = response.value.chart;\r\n            if (this.genres.chart.labels != ''){\r\n              this.renderChart('booksGenresChart', 'Books per Genre', this.genres.chart.labels, this.genres.chart.values, this.genres.chart.colors);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      fetchReadsStats: function(){\r\n        this.$http.get('/api/read_stats', function(response){\r\n          if(response.success){\r\n            this.reads.howMany = response.value.howMany;\r\n            this.reads.mostRead = response.value.mostRead;\r\n            this.reads.longestBook = response.value.longestBook;\r\n            this.reads.shortestBook = response.value.shortestBook;\r\n            this.reads.reads = response.value.reads;\r\n            this.reads.chart = response.value.chart;\r\n\r\n            var that = this;\r\n            var ctx = document.getElementById('booksReadsChart');\r\n            var myChart = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: that.reads.chart.labels,\r\n                    datasets: that.reads.chart.data\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero:true\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            });\r\n\r\n          }\r\n\r\n          this.hideLoader();\r\n        });\r\n      },\r\n      fetchVotesStats: function(){\r\n        this.showLoader();\r\n\r\n        this.$http.get('/api/vote_stats', function(response){\r\n          if(response.success){\r\n            this.votes.bestRanked = response.value.bestRanked;\r\n            this.votes.worstRanked = response.value.worstRanked;\r\n            this.votes.chart = response.value.chart;\r\n            if (this.votes.chart.labels != ''){\r\n              this.renderChart('booksVotesChart', 'Books per Votes', this.votes.chart.labels, this.votes.chart.values, this.votes.chart.colors);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      showLoader: function(){\r\n        $('.fullpage-mask').show();\r\n        $('.fullpage-loader').show();\r\n      },\r\n      hideLoader: function(){\r\n        $('.fullpage-mask').hide();\r\n        $('.fullpage-loader').hide();\r\n      }\r\n    },\r\n\r\n    // component events\r\n    events: {\r\n    }\r\n});\r\n"],"sourceRoot":"/source/"}